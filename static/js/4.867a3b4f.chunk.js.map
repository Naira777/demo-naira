{"version":3,"sources":[".vs/src/utils/validators/validators.js","Components/Dialogs/Dialogs.module.css","Components/Dialogs/Message/Message.jsx","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/AddMessageForm.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","Message","props","className","s","dialog","message","DialogItem","active","to","id","name","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","placeholder","Dialogs","React","memo","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"wGACA,oEAAO,IAAMA,EAAW,SAAAC,GAGxB,IAAIA,EAEJ,MAAO,qBAIMC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAE1C,GAAKA,EAAMG,OAASD,EAAW,MAAO,wC,oBCX5CE,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,8FCgB/HC,EAXC,SAACC,GAEjB,OAEA,yBAAKC,UAAWC,IAAEC,QAAlB,IAA4BH,EAAMI,QAAlC,M,QCOeC,EAZI,SAACL,GAEhB,OAEJ,yBAAKC,UAAWC,IAAEC,OAAQ,IAAMD,IAAEI,QAElC,kBAAC,IAAD,CAASC,GAAK,YAAcP,EAAMQ,IAAlC,IAAwCR,EAAMS,KAA9C,O,mCCLMC,EAAchB,YAAiB,IA2BrBiB,EAFaC,YAAW,CAACC,KAAM,2BAAlBD,EAvBN,SAACZ,GAIpB,OACM,0BAAMc,SAAUd,EAAMe,cAEnB,6BACE,kBAACC,EAAA,EAAD,CAAOC,UAAYC,IACnBC,SAAY,CAAC3B,IAASkB,GACtBD,KAAO,iBACPW,YAAa,wBAGd,6BAEE,+CCkCDC,EAjDCC,IAAMC,MAAK,SAACvB,GAE1B,IAAIwB,EAAOxB,EAAMyB,YAEbC,EAAiBF,EAAMG,QAAQC,KAAM,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMqB,IAAKD,EAAErB,GAAIA,GAAIqB,EAAErB,QAGrFuB,EAAmBP,EAAMQ,SAASJ,KAAM,SAAAK,GAAC,OAAG,kBAAC,EAAD,CAAS7B,QAAU6B,EAAE7B,QAAS0B,IAAKG,EAAEzB,QAYvF,OAAIR,EAAMkC,OAKN,yBAAKjC,UAAWC,IAAEyB,SAEZ,yBAAK1B,UAAYC,IAAEiC,cAEjBT,GAIF,yBAAKzB,UAAWC,IAAE8B,UAEfD,EAGL,kBAAC,EAAD,CAAsBjB,SA1BR,SAACsB,GAErBpC,EAAMqC,YAAYD,EAAOE,gBAEzBF,EAAOE,eAAe,QAIC,kBAAC,IAAD,CAAU/B,GAAM,c,uBC8C1BgC,sBAASC,aAzBD,SAAChB,GAEtB,MAAO,CAELC,YAAaD,EAAMC,gBAME,SAAEgB,GAE3B,MAAO,CAEPJ,YAAa,SAACC,GAEdG,EAASC,YAAmBJ,SAU5BK,IADeJ,CACGlB","file":"static/js/4.867a3b4f.chunk.js","sourcesContent":["\r\nexport const required = value => {\r\n\r\n\r\nif (value) return undefined;\r\n\r\nreturn \"Field is required\";\r\n\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n\r\n      if ( value.length > maxLength) return 'Max length is ${maxLength} symbols';\r\n       return undefined;\r\n    }\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__AZW7S\",\"dialogsItems\":\"Dialogs_dialogsItems__-_pPB\",\"active\":\"Dialogs_active__ve96H\",\"messages\":\"Dialogs_messages__2aIrE\"};","import React  from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\nreturn (\r\n\r\n<div className={s.dialog}> {props.message} </div>\r\n\r\n)\r\n\r\n\r\n}\r\n\r\nexport default Message;","import React  from 'react';\r\nimport s from './../../Dialogs/Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n \r\n    return(\r\n\r\n<div className={s.dialog +' ' + s.active }>\r\n\r\n<NavLink to= {\"/dialogs/\" + props.id}> {props.name} </NavLink>\r\n \r\n</div>)\r\n\r\n\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../../.vs/src/utils/validators/validators';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    // handleSubmit-@ reduxFormi mejic e,\r\n    // ev nra mej mer mutq arac informacian e nstum\r\n    return  (\r\n          <form onSubmit={props.handleSubmit}> \r\n          \r\n             <div>\r\n               <Field component= {Textarea}\r\n               validate = {[required,maxLength50 ]}\r\n               name = \"newMessageBody\"\r\n               placeholder= \"Enter your message\" />\r\n                                                \r\n              </div>\r\n              <div> \r\n                \r\n                <button> Send </button></div>\r\n         </form>\r\n                 \r\n    \r\n    )\r\n}\r\n    \r\nconst  AddMessageFormRedux = reduxForm ({form: 'dialog-add-message-form'}) (AddMessageForm)\r\n    \r\nexport default  AddMessageFormRedux;","import React  from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport Message from  '../Dialogs/Message/Message';\r\nimport DialogItem from '../Dialogs/DialogItem/DialogItem';\r\nimport AddMessageFormRedux from './Message/AddMessageForm';\r\n\r\n\r\n\r\nconst Dialogs = React.memo((props) => {\r\n\r\n  let state= props.dialogsPage;\r\n\r\n  let dialogsElements =state.dialogs.map ( d => <DialogItem name={d.name} key={d.id} id={d.id} /> );\r\n  \r\n  \r\n  let messagesElements = state.messages.map ( m=> <Message message= {m.message} key={m.id}/>);\r\n\r\n\r\n//values-i mej mer  soobshenian e nstac\r\n  let addNewMessage = (values) => {\r\n\r\n  props.sendMessage(values.newMessageBody);\r\n \r\n  values.newMessageBody=\"\";\r\n}\r\n\r\n\r\nif(!props.isAuth) return <Redirect to = {\"/login\"} />;\r\n\r\n\r\nreturn (\r\n\r\n    <div className={s.dialogs}>\r\n         \r\n          <div className= {s.dialogsItems}> \r\n   \r\n           {dialogsElements}\r\n\r\n          </div>\r\n\r\n          <div className={s.messages}>\r\n\r\n            {messagesElements} \r\n\r\n   \r\n        <AddMessageFormRedux  onSubmit= {addNewMessage} />\r\n\r\n         </div>\r\n    \r\n\r\n    </div>\r\n\r\n)\r\n\r\n} );\r\n\r\n\r\nexport default Dialogs;","import React  from 'react';\r\n\r\nimport { sendMessageCreator } from '../../Redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from './hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n/*\r\n\r\nconst DialogsContainer = (props) => {\r\n\r\n\r\n  return  <StoreContext.Consumer> \r\n\r\n     {         \r\n      (store) => {\r\n\r\n      let onSendMessageClick = () => {\r\n    \r\n      store.dispatch(sendMessageCreator());\r\n      \r\n     }\r\n    \r\n       let onNewMessageChange = (body) => {\r\n    \r\n      store.dispatch(updateNewMessageBodyCreator(body));\r\n      \r\n    }\r\n    \r\n    \r\n    return    <Dialogs updateNewMessageBody= {onNewMessageChange}\r\n              sendMessage= {onSendMessageClick}\r\n             dialogsPage= {store.getState().dialogsPage}/>\r\n    \r\n      }\r\n    \r\n      \r\n    }\r\n\r\n  </StoreContext.Consumer>\r\n \r\n  \r\n} */\r\n\r\n\r\nlet mapStateToProps  = (state) => {\r\n\r\n  return {\r\n\r\n    dialogsPage: state.dialogsPage,\r\n\r\n  }\r\n\r\n\r\n}\r\nlet mapDispatchToProps = ( dispatch) => {\r\n\r\nreturn {\r\n\r\nsendMessage: (newMessageBody) => {\r\n\r\ndispatch(sendMessageCreator(newMessageBody));\r\n\r\n}\r\n\r\n}\r\n  \r\n}\r\n\r\n\r\nexport default compose (connect(mapStateToProps, mapDispatchToProps),\r\nwithAuthRedirect)(Dialogs);"],"sourceRoot":""}